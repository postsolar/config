commit 09f16900d8759643d313ff20c61a2bed13a80a5a
Merge: ffa42a79 39c50643
Author: postsolar <120750161+postsolar@users.noreply.github.com>
Date:   Tue Jul 22 03:25:22 2025 +0300

    Merge remote-tracking branch 'klukaszek/feat/add-editor-environment-variable-support'

diff --git a/packages/cli/src/ui/editors/editorSettingsManager.ts b/packages/cli/src/ui/editors/editorSettingsManager.ts
index 7e45b42e..f741add6 100644
--- a/packages/cli/src/ui/editors/editorSettingsManager.ts
+++ b/packages/cli/src/ui/editors/editorSettingsManager.ts
@@ -24,6 +24,7 @@ export const EDITOR_DISPLAY_NAMES: Record<EditorType, string> = {
   cursor: 'Cursor',
   vim: 'Vim',
   neovim: 'Neovim',
+  editor: 'VISUAL/EDITOR Environment Variable',
 };
 
 class EditorSettingsManager {
@@ -38,6 +39,7 @@ class EditorSettingsManager {
       'cursor',
       'vim',
       'neovim',
+      'editor',
     ];
     this.availableEditors = [
       {
diff --git a/packages/core/src/utils/editor.test.ts b/packages/core/src/utils/editor.test.ts
index a86d6f59..865b881e 100644
--- a/packages/core/src/utils/editor.test.ts
+++ b/packages/core/src/utils/editor.test.ts
@@ -5,21 +5,21 @@
  */
 
 import {
-  vi,
+  afterEach,
+  beforeEach,
   describe,
-  it,
   expect,
-  beforeEach,
-  afterEach,
+  it,
   type Mock,
+  vi,
 } from 'vitest';
 import {
+  allowEditorTypeInSandbox,
   checkHasEditorType,
+  type EditorType,
   getDiffCommand,
-  openDiff,
-  allowEditorTypeInSandbox,
   isEditorAvailable,
-  type EditorType,
+  openDiff,
 } from './editor.js';
 import { execSync, spawn } from 'child_process';
 
@@ -148,6 +148,73 @@ describe('editor utils', () => {
         });
       });
     }
+
+    describe('editor', () => {
+      it('should return true if EDITOR environment variable is set and command exists', () => {
+        delete process.env.VISUAL;
+        process.env.EDITOR = 'nano';
+        (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/nano'));
+        expect(checkHasEditorType('editor')).toBe(true);
+        expect(execSync).toHaveBeenCalledWith('command -v nano', {
+          stdio: 'ignore',
+        });
+      });
+
+      it('should return true if VISUAL environment variable is set and command exists', () => {
+        process.env.VISUAL = 'vim';
+        process.env.EDITOR = 'nano';
+        (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/vim'));
+        expect(checkHasEditorType('editor')).toBe(true);
+        expect(execSync).toHaveBeenCalledWith('command -v vim', {
+          stdio: 'ignore',
+        });
+      });
+
+      it('should prioritize VISUAL over EDITOR', () => {
+        process.env.VISUAL = 'emacs';
+        process.env.EDITOR = 'nano';
+        (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/emacs'));
+        expect(checkHasEditorType('editor')).toBe(true);
+        expect(execSync).toHaveBeenCalledWith('command -v emacs', {
+          stdio: 'ignore',
+        });
+      });
+
+      it('should return false if neither VISUAL nor EDITOR environment variables are set', () => {
+        delete process.env.VISUAL;
+        delete process.env.EDITOR;
+        expect(checkHasEditorType('editor')).toBe(false);
+      });
+
+      it('should return false if EDITOR command does not exist', () => {
+        delete process.env.VISUAL;
+        process.env.EDITOR = 'nonexistent-editor';
+        (execSync as Mock).mockImplementation(() => {
+          throw new Error();
+        });
+        expect(checkHasEditorType('editor')).toBe(false);
+      });
+
+      it('should handle EDITOR with arguments', () => {
+        delete process.env.VISUAL;
+        process.env.EDITOR = 'nano -w';
+        (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/nano'));
+        expect(checkHasEditorType('editor')).toBe(true);
+        expect(execSync).toHaveBeenCalledWith('command -v nano', {
+          stdio: 'ignore',
+        });
+      });
+
+      it('should handle VISUAL with arguments', () => {
+        process.env.VISUAL = 'vim -n';
+        process.env.EDITOR = 'nano';
+        (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/vim'));
+        expect(checkHasEditorType('editor')).toBe(true);
+        expect(execSync).toHaveBeenCalledWith('command -v vim', {
+          stdio: 'ignore',
+        });
+      });
+    });
   });
 
   describe('getDiffCommand', () => {
@@ -297,6 +364,138 @@ describe('editor utils', () => {
       });
     }
 
+    it('should return the correct command for editor with vim', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'vim';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'vim',
+        args: [
+          '-d',
+          '-i',
+          'NONE',
+          '-c',
+          'wincmd h | set readonly | wincmd l',
+          '-c',
+          'highlight DiffAdd cterm=bold ctermbg=22 guibg=#005f00 | highlight DiffChange cterm=bold ctermbg=24 guibg=#005f87 | highlight DiffText ctermbg=21 guibg=#0000af | highlight DiffDelete ctermbg=52 guibg=#5f0000',
+          '-c',
+          'set showtabline=2 | set tabline=[Instructions]\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'wincmd h | setlocal statusline=OLD\\ FILE',
+          '-c',
+          'wincmd l | setlocal statusline=%#StatusBold#NEW\\ FILE\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'autocmd WinClosed * wqa',
+          'old.txt',
+          'new.txt',
+        ],
+      });
+    });
+
+    it('should return the correct command for editor with nvim', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'nvim';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'nvim',
+        args: [
+          '-d',
+          '-i',
+          'NONE',
+          '-c',
+          'wincmd h | set readonly | wincmd l',
+          '-c',
+          'highlight DiffAdd cterm=bold ctermbg=22 guibg=#005f00 | highlight DiffChange cterm=bold ctermbg=24 guibg=#005f87 | highlight DiffText ctermbg=21 guibg=#0000af | highlight DiffDelete ctermbg=52 guibg=#5f0000',
+          '-c',
+          'set showtabline=2 | set tabline=[Instructions]\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'wincmd h | setlocal statusline=OLD\\ FILE',
+          '-c',
+          'wincmd l | setlocal statusline=%#StatusBold#NEW\\ FILE\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'autocmd WinClosed * wqa',
+          'old.txt',
+          'new.txt',
+        ],
+      });
+    });
+
+    it('should return the correct command for editor with emacs', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'emacs';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'emacs',
+        args: ['old.txt', 'new.txt'],
+      });
+    });
+
+    it('should return the correct command for editor with helix', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'hx';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'hx',
+        args: ['--vsplit', 'old.txt', 'new.txt'],
+      });
+    });
+
+    it('should return the correct command for editor with nano (default behavior)', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'nano';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'nano',
+        args: ['new.txt'],
+      });
+    });
+
+    it('should return the correct command for editor with arguments', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'vim -n';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'vim',
+        args: [
+          '-n',
+          '-d',
+          '-i',
+          'NONE',
+          '-c',
+          'wincmd h | set readonly | wincmd l',
+          '-c',
+          'highlight DiffAdd cterm=bold ctermbg=22 guibg=#005f00 | highlight DiffChange cterm=bold ctermbg=24 guibg=#005f87 | highlight DiffText ctermbg=21 guibg=#0000af | highlight DiffDelete ctermbg=52 guibg=#5f0000',
+          '-c',
+          'set showtabline=2 | set tabline=[Instructions]\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'wincmd h | setlocal statusline=OLD\\ FILE',
+          '-c',
+          'wincmd l | setlocal statusline=%#StatusBold#NEW\\ FILE\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+          '-c',
+          'autocmd WinClosed * wqa',
+          'old.txt',
+          'new.txt',
+        ],
+      });
+    });
+
+    it('should return null for editor when neither VISUAL nor EDITOR env vars are set', () => {
+      delete process.env.VISUAL;
+      delete process.env.EDITOR;
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toBeNull();
+    });
+
+    it('should prioritize VISUAL over EDITOR in getDiffCommand', () => {
+      process.env.VISUAL = 'emacs';
+      process.env.EDITOR = 'nano';
+      const command = getDiffCommand('old.txt', 'new.txt', 'editor');
+      expect(command).toEqual({
+        command: 'emacs',
+        args: ['old.txt', 'new.txt'],
+      });
+    });
+
     it('should return null for an unsupported editor', () => {
       // @ts-expect-error Testing unsupported editor
       const command = getDiffCommand('old.txt', 'new.txt', 'foobar');
@@ -387,21 +586,91 @@ describe('editor utils', () => {
           encoding: 'utf8',
         });
       });
+    }
 
-      it(`should call execSync for ${editor} on windows`, async () => {
-        Object.defineProperty(process, 'platform', { value: 'win32' });
-        await openDiff('old.txt', 'new.txt', editor);
-        expect(execSync).toHaveBeenCalledTimes(1);
-        const diffCommand = getDiffCommand('old.txt', 'new.txt', editor)!;
-        const expectedCommand = `${diffCommand.command} ${diffCommand.args.join(
-          ' ',
-        )}`;
-        expect(execSync).toHaveBeenCalledWith(expectedCommand, {
+    it('should call execSync for vim on windows', async () => {
+      Object.defineProperty(process, 'platform', { value: 'win32' });
+      await openDiff('old.txt', 'new.txt', 'vim');
+      expect(execSync).toHaveBeenCalledTimes(1);
+      const diffCommand = getDiffCommand('old.txt', 'new.txt', 'vim')!;
+      const expectedCommand = `${diffCommand.command} ${diffCommand.args.join(
+        ' ',
+      )}`;
+      expect(execSync).toHaveBeenCalledWith(expectedCommand, {
+        stdio: 'inherit',
+        encoding: 'utf8',
+      });
+    });
+
+    it('should call execSync for terminal-based editor on non-windows', async () => {
+      Object.defineProperty(process, 'platform', { value: 'linux' });
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'nano';
+      await openDiff('old.txt', 'new.txt', 'editor');
+      expect(execSync).toHaveBeenCalledTimes(1);
+      const diffCommand = getDiffCommand('old.txt', 'new.txt', 'editor')!;
+      const expectedCommand = `${diffCommand.command} ${diffCommand.args
+        .map((arg) => `"${arg}"`)
+        .join(' ')}`;
+      expect(execSync).toHaveBeenCalledWith(expectedCommand, {
+        stdio: 'inherit',
+        encoding: 'utf8',
+      });
+    });
+
+    it('should call execSync for terminal-based editor on windows', async () => {
+      Object.defineProperty(process, 'platform', { value: 'win32' });
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'notepad';
+      await openDiff('old.txt', 'new.txt', 'editor');
+      expect(execSync).toHaveBeenCalledTimes(1);
+      const diffCommand = getDiffCommand('old.txt', 'new.txt', 'editor')!;
+      const expectedCommand = `${diffCommand.command} ${diffCommand.args.join(
+        ' ',
+      )}`;
+      expect(execSync).toHaveBeenCalledWith(expectedCommand, {
+        stdio: 'inherit',
+        encoding: 'utf8',
+      });
+    });
+
+    it('should call spawn for GUI emacs', async () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'emacs';
+      const mockSpawn = {
+        on: vi.fn((event, cb) => {
+          if (event === 'close') {
+            cb(0);
+          }
+        }),
+      };
+      (spawn as Mock).mockReturnValue(mockSpawn);
+      await openDiff('old.txt', 'new.txt', 'editor');
+      const diffCommand = getDiffCommand('old.txt', 'new.txt', 'editor')!;
+      expect(spawn).toHaveBeenCalledWith(
+        diffCommand.command,
+        diffCommand.args,
+        {
           stdio: 'inherit',
-          encoding: 'utf8',
-        });
+          shell: true,
+        },
+      );
+    });
+
+    it('should call execSync for terminal emacs', async () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'emacs -nw';
+      await openDiff('old.txt', 'new.txt', 'editor');
+      expect(execSync).toHaveBeenCalledTimes(1);
+      const diffCommand = getDiffCommand('old.txt', 'new.txt', 'editor')!;
+      const expectedCommand = `${diffCommand.command} ${diffCommand.args
+        .map((arg) => `"${arg}"`)
+        .join(' ')}`;
+      expect(execSync).toHaveBeenCalledWith(expectedCommand, {
+        stdio: 'inherit',
+        encoding: 'utf8',
       });
-    }
+    });
 
     it('should log an error if diff command is not available', async () => {
       const consoleErrorSpy = vi
@@ -451,6 +720,15 @@ describe('editor utils', () => {
         expect(allowEditorTypeInSandbox(editor)).toBe(true);
       });
     }
+
+    it('should allow editor in sandbox mode', () => {
+      process.env.SANDBOX = 'sandbox';
+      expect(allowEditorTypeInSandbox('editor')).toBe(true);
+    });
+
+    it('should allow editor when not in sandbox mode', () => {
+      expect(allowEditorTypeInSandbox('editor')).toBe(true);
+    });
   });
 
   describe('isEditorAvailable', () => {
@@ -495,5 +773,41 @@ describe('editor utils', () => {
       process.env.SANDBOX = 'sandbox';
       expect(isEditorAvailable('neovim')).toBe(true);
     });
+
+    it('should return true for editor when EDITOR is set and command exists', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'nano';
+      (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/nano'));
+      expect(isEditorAvailable('editor')).toBe(true);
+    });
+
+    it('should return true for editor when VISUAL is set and command exists', () => {
+      process.env.VISUAL = 'vim';
+      process.env.EDITOR = 'nano';
+      (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/vim'));
+      expect(isEditorAvailable('editor')).toBe(true);
+    });
+
+    it('should return false for editor when neither VISUAL nor EDITOR are set', () => {
+      delete process.env.VISUAL;
+      delete process.env.EDITOR;
+      expect(isEditorAvailable('editor')).toBe(false);
+    });
+
+    it('should return false for editor when EDITOR command does not exist', () => {
+      delete process.env.VISUAL;
+      process.env.EDITOR = 'nonexistent-editor';
+      (execSync as Mock).mockImplementation(() => {
+        throw new Error();
+      });
+      expect(isEditorAvailable('editor')).toBe(false);
+    });
+
+    it('should prioritize VISUAL over EDITOR in isEditorAvailable', () => {
+      process.env.VISUAL = 'emacs';
+      process.env.EDITOR = 'nonexistent-editor';
+      (execSync as Mock).mockReturnValue(Buffer.from('/usr/bin/emacs'));
+      expect(isEditorAvailable('editor')).toBe(true);
+    });
   });
 });
diff --git a/packages/core/src/utils/editor.ts b/packages/core/src/utils/editor.ts
index 2d65d525..e8d72ef6 100644
--- a/packages/core/src/utils/editor.ts
+++ b/packages/core/src/utils/editor.ts
@@ -13,7 +13,8 @@ export type EditorType =
   | 'cursor'
   | 'vim'
   | 'neovim'
-  | 'zed';
+  | 'zed'
+  | 'editor';
 
 function isValidEditorType(editor: string): editor is EditorType {
   return [
@@ -24,6 +25,7 @@ function isValidEditorType(editor: string): editor is EditorType {
     'vim',
     'neovim',
     'zed',
+    'editor',
   ].includes(editor);
 }
 
@@ -49,7 +51,7 @@ function commandExists(cmd: string): boolean {
  * Each editor can have multiple possible command names, listed in order of preference.
  */
 const editorCommands: Record<
-  EditorType,
+  Exclude<EditorType, 'editor'>,
   { win32: string[]; default: string[] }
 > = {
   vscode: { win32: ['code.cmd'], default: ['code'] },
@@ -62,7 +64,17 @@ const editorCommands: Record<
 };
 
 export function checkHasEditorType(editor: EditorType): boolean {
-  const commandConfig = editorCommands[editor];
+  if (editor === 'editor') {
+    // Check VISUAL first, then EDITOR (following Unix conventions)
+    const editorCmd = process.env.VISUAL || process.env.EDITOR;
+    if (!editorCmd) {
+      return false;
+    }
+    // Extract just the command name (first word) for checking
+    const command = editorCmd.split(' ')[0];
+    return commandExists(command);
+  }
+  const commandConfig = editorCommands[editor as Exclude<EditorType, 'editor'>];
   const commands =
     process.platform === 'win32' ? commandConfig.win32 : commandConfig.default;
   return commands.some((cmd) => commandExists(cmd));
@@ -73,6 +85,7 @@ export function allowEditorTypeInSandbox(editor: EditorType): boolean {
   if (['vscode', 'vscodium', 'windsurf', 'cursor', 'zed'].includes(editor)) {
     return notUsingSandbox;
   }
+  // Allow editor type in sandbox (assumes it's likely a terminal editor)
   return true;
 }
 
@@ -98,12 +111,19 @@ export function getDiffCommand(
   if (!isValidEditorType(editor)) {
     return null;
   }
-  const commandConfig = editorCommands[editor];
-  const commands =
-    process.platform === 'win32' ? commandConfig.win32 : commandConfig.default;
-  const command =
-    commands.slice(0, -1).find((cmd) => commandExists(cmd)) ||
-    commands[commands.length - 1];
+
+  let command: string;
+  if (editor === 'editor') {
+    // For editor type, we don't use editorCommands - handle separately
+    command = '';
+  } else {
+    const commandConfig =
+      editorCommands[editor as Exclude<EditorType, 'editor'>];
+    command =
+      process.platform === 'win32'
+        ? commandConfig.win32[0]
+        : commandConfig.default[0];
+  }
 
   switch (editor) {
     case 'vscode':
@@ -141,6 +161,67 @@ export function getDiffCommand(
           newPath,
         ],
       };
+    case 'editor': {
+      // Use VISUAL first, then EDITOR environment variable with appropriate diff handling
+      const editorCmd = process.env.VISUAL || process.env.EDITOR;
+      if (!editorCmd) {
+        return null;
+      }
+      const parts = editorCmd.split(' ');
+      const editorCommand = parts[0];
+      const editorArgs = parts.slice(1);
+      const editorName = editorCommand.toLowerCase();
+
+      // Handle different editors' diff modes
+      if (
+        editorName.includes('vim') ||
+        editorName.includes('nvim') ||
+        editorName === 'vi'
+      ) {
+        // Vim-style diff mode
+        return {
+          command: editorCommand,
+          args: [
+            ...editorArgs,
+            '-d',
+            '-i',
+            'NONE',
+            '-c',
+            'wincmd h | set readonly | wincmd l',
+            '-c',
+            'highlight DiffAdd cterm=bold ctermbg=22 guibg=#005f00 | highlight DiffChange cterm=bold ctermbg=24 guibg=#005f87 | highlight DiffText ctermbg=21 guibg=#0000af | highlight DiffDelete ctermbg=52 guibg=#5f0000',
+            '-c',
+            'set showtabline=2 | set tabline=[Instructions]\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+            '-c',
+            'wincmd h | setlocal statusline=OLD\\ FILE',
+            '-c',
+            'wincmd l | setlocal statusline=%#StatusBold#NEW\\ FILE\\ :wqa(save\\ &\\ quit)\\ \\|\\ i/esc(toggle\\ edit\\ mode)',
+            '-c',
+            'autocmd WinClosed * wqa',
+            oldPath,
+            newPath,
+          ],
+        };
+      } else if (editorName.includes('emacs')) {
+        // Emacs - just open both files
+        return {
+          command: editorCommand,
+          args: [...editorArgs, oldPath, newPath],
+        };
+      } else if (editorName === 'hx' || editorName.includes('helix')) {
+        // Helix doesn't have built-in diff mode, open side by side
+        return {
+          command: editorCommand,
+          args: [...editorArgs, '--vsplit', oldPath, newPath],
+        };
+      } else {
+        // Default: just open the new file for editing (most editors)
+        return {
+          command: editorCommand,
+          args: [...editorArgs, newPath],
+        };
+      }
+    }
     default:
       return null;
   }
@@ -176,7 +257,7 @@ export async function openDiff(
             shell: true,
           });
 
-          childProcess.on('close', (code) => {
+          childProcess.on('close', (code: number) => {
             if (code === 0) {
               resolve();
             } else {
@@ -184,7 +265,7 @@ export async function openDiff(
             }
           });
 
-          childProcess.on('error', (error) => {
+          childProcess.on('error', (error: Error) => {
             reject(error);
           });
         });
@@ -195,7 +276,9 @@ export async function openDiff(
         const command =
           process.platform === 'win32'
             ? `${diffCommand.command} ${diffCommand.args.join(' ')}`
-            : `${diffCommand.command} ${diffCommand.args.map((arg) => `"${arg}"`).join(' ')}`;
+            : `${diffCommand.command} ${diffCommand.args
+                .map((arg) => `"${arg}"`)
+                .join(' ')}`;
         execSync(command, {
           stdio: 'inherit',
           encoding: 'utf8',
@@ -203,6 +286,51 @@ export async function openDiff(
         break;
       }
 
+      case 'editor': {
+        // Handle VISUAL/EDITOR environment variable with proper execution strategy
+        const editorCmd = process.env.VISUAL || process.env.EDITOR;
+        if (!editorCmd) {
+          throw new Error('VISUAL or EDITOR environment variable not set');
+        }
+        const editorName = editorCmd.split(' ')[0].toLowerCase();
+
+        // Use spawn for GUI editors that might support --wait or similar
+        if (editorName.includes('emacs') && !editorCmd.includes('-nw')) {
+          // GUI Emacs - use spawn
+          return new Promise((resolve, reject) => {
+            const childProcess = spawn(diffCommand.command, diffCommand.args, {
+              stdio: 'inherit',
+              shell: true,
+            });
+
+            childProcess.on('close', (code: number) => {
+              if (code === 0) {
+                resolve();
+              } else {
+                reject(new Error(`${editorName} exited with code ${code}`));
+              }
+            });
+
+            childProcess.on('error', (error: Error) => {
+              reject(error);
+            });
+          });
+        } else {
+          // Terminal-based editors or editors without GUI mode - use execSync
+          const command =
+            process.platform === 'win32'
+              ? `${diffCommand.command} ${diffCommand.args.join(' ')}`
+              : `${diffCommand.command} ${diffCommand.args
+                  .map((arg) => `"${arg}"`)
+                  .join(' ')}`;
+          execSync(command, {
+            stdio: 'inherit',
+            encoding: 'utf8',
+          });
+        }
+        break;
+      }
+
       default:
         throw new Error(`Unsupported editor: ${editor}`);
     }
